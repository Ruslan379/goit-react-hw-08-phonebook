{"version":3,"file":"static/js/451.4e1dee36.chunk.js","mappings":"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","sources":["redux/tasks/selectors.js","webpack://react-homework-template/./src/components/TaskEditor/TaskEditor.module.css?47aa","components/TaskEditor/TaskEditor.js","components/Spinner/Spinner.js","webpack://react-homework-template/./src/components/Modal/Modal.module.css?28d7","components/Modal/Modal.jsx","webpack://react-homework-template/./src/components/Task/Task.module.css?22e8","components/Task/Task.js","webpack://react-homework-template/./src/components/TaskList/TaskList.module.css?079b","components/TaskList/TaskList.js","redux/filter/filterSelectors.js","webpack://react-homework-template/./src/components/Container/Container.module.css?9f71","components/Container/Container.jsx","components/Loader/Loader.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/Tasks.js"],"sourcesContent":["// export const selectLoading = state => state.tasks.loading; //! Ошибка Репеты\nexport const selectLoading = state => state.tasks.isLoading;\n\n// export const selectFilter = state => state.tasks.filter;\n\nexport const selectAllTasks = state => state.tasks.items;\n","// extracted by mini-css-extract-plugin\nexport default {\"Form\":\"TaskEditor_Form__wa-SE\",\"FormLabel\":\"TaskEditor_FormLabel__4glZA\",\"FormBtn\":\"TaskEditor_FormBtn__tHm6t\",\"FormInput\":\"TaskEditor_FormInput__+5PdH\"};","import { useDispatch } from 'react-redux';\nimport { addTask } from 'redux/tasks/operations';\nimport css from './TaskEditor.module.css';\n\n\n// export const TaskEditor = (nameValue = \"rus\", numberValue = \"\") => {\nexport const TaskEditor = () => {\n    const dispatch = useDispatch();\n\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        // e.currentTarget.elements.name.value = \"Ruslan\";\n        // e.currentTarget.elements.number.value = numberValue;\n\n        // document.querySelector('#inputName').value = \"nameValue\";\n\n\n        const form = e.currentTarget;\n        const name = form.elements.name.value;\n        const number = form.elements.number.value;\n        if (name !== \"\" && number !== \"\") {\n            dispatch(addTask({ name, number }));\n            form.reset();\n            return;\n        }\n        alert('Заполни текст заметки.');\n    };\n\n    return (\n        <form\n            className={css.Form}\n            onSubmit={handleSubmit}\n        >\n\n            <label\n                className={css.FormLabel}\n            >\n                Name\n                {/* {addition ? \"Wait for add...\" : \"Name\"} */}\n                <br />\n                <input\n                    className={css.FormInput}\n                    id=\"inputName\"\n                    type=\"text\"\n                    name=\"name\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                // value={nameValue}\n                // onChange={handleChange}\n                />\n            </label>\n            <br />\n\n            <label className={css.FormLabel}>\n                Number\n                {/* {addition ? \"...\" : \"Number\"} */}\n                <br />\n                <input\n                    className={css.FormInput}\n                    type=\"tel\"\n                    name=\"number\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                // value={numberValue}\n                // onChange={handleChange}\n                />\n            </label>\n            <br />\n\n            <button\n                className={css.FormBtn}\n                type=\"submit\"\n            // disabled={addition}\n            >\n                Add contact\n                {/* {addition ? <Spinner size= \"32\">Add contact</Spinner>  : \"Add contact\"} */}\n            </button>\n        </form>\n    );\n}\n\n// ContactForm.propTypes = {\n//     onSubmit: PropTypes.func.isRequired,\n// };\n\n\n\n\n\n\n\n    // const dispatch = useDispatch();\n\n    // const handleSubmit = e => {\n    //     e.preventDefault();\n    //     const form = e.currentTarget;\n    //     const text = form.elements.text.value;\n    //     if (text !== '') {\n    //         dispatch(addTask(text));\n    //         form.reset();\n    //         return;\n    //     }\n    //     alert('Заполни текст заметки.');\n    // };\n\n    // return (\n    //     <form className={css.form} onSubmit={handleSubmit}>\n    //         <input name=\"text\" className={css.input} />\n    //         <button type=\"submit\" className={css.button}>\n    //             Add todo\n    //         </button>\n    //     </form>\n    // );\n\n","import styled from '@emotion/styled/macro';\nimport { keyframes } from '@emotion/react';\nimport { CgSpinner } from 'react-icons/cg';\n\nconst spin = keyframes`\n0% {\n  transform: rotate(0deg);\n}\n\n100% {\n  transform: rotate(1turn);\n}\n`;\n\nexport const Spinner = styled(CgSpinner)`\n  animation: ${spin} 0.85s linear infinite;\n`;\n\nSpinner.defaultProps = {\n  size: 40,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"Overlay\":\"Modal_Overlay__yoxbg\",\"Modal\":\"Modal_Modal__I1UYJ\"};","import { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\n\nimport PropTypes from 'prop-types';\n\nimport css from 'components/Modal/Modal.module.css' \n\n\nconst modalRoot = document.querySelector('#modal-root');\n\n\n\n\n\nexport function Modal({ children, onClose }) {\n\n  useEffect(() => {\n    //* Переносим handleKeyDown внутрь useEffect,\n    //*  чтобы не вносить в массив зависимостей:\n      //! React Hook useEffect имеет отсутствующую зависимость: 'handleKeyDown'. \n      //! Либо включите его, либо удалите массив зависимостей: }, []);\n      \n    const handleKeyDown = event => {\n      if (event.code === 'Escape') {\n        onClose();\n      }\n    };\n    \n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [onClose]); \n\n\n  //* Переносим handleKeyDown внутрь useEffect\n  // const handleKeyDown = event => {\n  //   if (event.code === 'Escape') {\n  //     onClose();\n  //   }\n  // };\n\n\n  const handleBackdropClick = event => {\n    if (event.currentTarget === event.target) {\n      onClose();\n    }\n  };\n\n\n\n    return createPortal(\n      <div\n        className={css.Overlay}\n        onClick={handleBackdropClick}\n      >\n          <div className={css.Modal}>\n          {children}\n          </div>\n      </div>,\n      modalRoot,\n    );\n  }\n\n\n\nModal.propTypes = {\n  // children: PropTypes.object.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Task_wrapper__zvx3s\",\"text\":\"Task_text__IwwM2\",\"button\":\"Task_button__dYLbw\",\"ContactListItem\":\"Task_ContactListItem__WYtbi\",\"ContactListText\":\"Task_ContactListText__s+bVg\",\"ContactListNumber\":\"Task_ContactListNumber__lqI8z\",\"ContactListEditBtn\":\"Task_ContactListEditBtn__yxVxT\",\"ContactListDeleteBtn\":\"Task_ContactListDeleteBtn__Vmo4l\"};","import { useState } from 'react'; //* +++\nimport { useDispatch, useSelector } from 'react-redux';\n// import PropTypes from 'prop-types';\n\nimport { deleteTask, editContact } from 'redux/tasks/operations';\n\nimport { selectLoading } from 'redux/tasks/selectors';\nimport { TaskEditor } from 'components/TaskEditor/TaskEditor';\nimport { Spinner } from 'components/Spinner/Spinner';\nimport { Modal } from 'components/Modal/Modal';\n\nimport css from './Task.module.css';\n\n\n\nexport const Task = ({ id, name, number }) => {\n    const [showModal, setShowModal] = useState(false);\n\n    const dispatch = useDispatch();\n\n    const isLoading = useSelector(selectLoading);\n    // console.log(\"Tasks==>isLoading:\", isLoading); //!\n\n    const handleDelete = () => dispatch(deleteTask(id));\n\n    //! +++++++++++++++++++++++++++++++++++\n    const toggleModal = () => {\n        setShowModal(!showModal);\n    };\n\n    const handleEdit = () => {\n        toggleModal()\n        const newName = \"RoseEDIT\"\n        const newNumber = \"000-00-00\"\n        console.log(\"id:\", id);\n        console.log(\"newName:\", newName);\n        console.log(\"newNumber:\", newNumber);\n\n        // TaskEditor(newName, newNumber)\n\n        dispatch(editContact({ id, newName, newNumber }))\n    };\n    //! +++++++++++++++++++++++++++++++++++\n\n\n\n    return (\n        <>\n            <li className={css.ContactListItem}>\n                <p className={css.ContactListText}>{name}:\n                    <span className={css.ContactListNumber}\n                    > {number}\n                    </span>\n                </p>\n                <button\n                    type=\"button\"\n                    className={css.ContactListEditBtn}\n                    onClick={handleEdit}\n                    // onClick={() => deleteContact(id)}\n                    disabled={isLoading}\n                >\n                    {/* Edit */}\n                    {isLoading ? [<Spinner size=\"18\" />, \" Editing...\"] : \"Edit\"}\n                </button>\n                <button\n                    type=\"button\"\n                    className={css.ContactListDeleteBtn}\n                    onClick={handleDelete}\n                    // onClick={() => deleteContact(id)}\n                    disabled={isLoading}\n                >\n                    {/* Delete */}\n                    {isLoading ? [<Spinner size=\"18\" />, \" Deleting...\"] : \"Delete\"}\n                </button>\n\n                {showModal && (\n                    <Modal onClose={toggleModal}>\n                        <TaskEditor />\n                    </Modal>\n                )}\n            </li>\n        </>\n    );\n};\n\n\n\n// export const Task = ({ id, text }) => {\n//     const dispatch = useDispatch();\n//     const handleDelete = () => dispatch(deleteTask(id));\n\n//     return (\n//         <div className={css.wrapper}>\n//             <p className={css.text}>{text}</p>\n//             <button type=\"button\" className={css.button} onClick={handleDelete}>\n//                 Delete\n//             </button>\n//         </div>\n//     );\n// };\n\n\n// ContactListItem.propTypes = {\n//     id: PropTypes.string.isRequired,\n//     // id: PropTypes.number.isRequired,\n//     name: PropTypes.string.isRequired,\n//     number: PropTypes.string.isRequired,\n// };\n","// extracted by mini-css-extract-plugin\nexport default {\"ContactList\":\"TaskList_ContactList__ZVQgm\"};","// import { useSelector } from 'react-redux';\nimport { Task } from '../Task/Task';\n// import { selectAllTasks } from 'redux/tasks/selectors';\nimport css from './TaskList.module.css';\n\nexport const TaskList = ({ visibleContacts }) => {\n    // const tasks = useSelector(selectAllTasks);\n    // console.log(\"TaskList==>tasks:\", tasks); //!\n\n    return (\n        <ul className={css.ContactList}>\n            {visibleContacts.map(({ id, name, number }) => (\n                <Task\n                    key={id}\n                    // key={Number(id)}\n                    id={id}\n                    // id={Number(id)}\n                    name={name}\n                    number={number}\n                />\n            ))}\n        </ul>\n    );\n\n\n\n    // return (\n    //     <ul className={css.list}>\n    //         {tasks.map(({ id, text }) => (\n    //             <li key={id}>\n    //                 <Task id={id} text={text} />\n    //             </li>\n    //         ))}\n    //     </ul>\n    // );\n};\n\n\n// ContactList.propTypes = {\n//     visibleContacts: PropTypes.array.isRequired,\n// };","// export const getFilter = state => state.contacts.filter; //todo OLD\nexport const getFilter = state => state.filter; //! для 3-го варианта store with RTK Query","// extracted by mini-css-extract-plugin\nexport default {\"Container\":\"Container_Container__dPyVg\"};","import React from 'react';\nimport PropTypes from 'prop-types';\n// import './Container.css';\n// import 'components/Container/Container.css';\n\nimport css from 'components/Container/Container.module.css' //todo = старый вариант импорта стилей\n\n\nexport const Container = ({ children }) =>\n    <div className={css.Container}>\n        {children}\n    </div>;\n\n\nContainer.propTypes = {\n    children: PropTypes.node.isRequired,\n};\n\n\n","import React from 'react';\n// import PropTypes from 'prop-types';\n\nimport { Audio } from  'react-loader-spinner'\n\n\n\nexport const Loader = () => (\n  <h1 style={{ margin: '0 auto' }}>\n    Please wait...\n      <Audio width = \"100%\" />\n  </h1>\n);\n\n\n\n// export default Loader;\n","// extracted by mini-css-extract-plugin\nexport default {\"FilterLabel\":\"Filter_FilterLabel__OSs84\",\"FilterInput\":\"Filter_FilterInput__-+rOd\"};","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n// import PropTypes from 'prop-types';\n\nimport css from 'components/Filter/Filter.module.css' \n\nimport { getFilter } from 'redux/filter/filterSelectors';\nimport { changesFilter } from 'redux/filter/filterSlice';\n\n\n// export const Filter = ({ value, onChange }) => {\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n  console.log(\"Filter==>filter:\", filter); //!\n\n//! запись значения из input-(Find contacts by name) в filter\n    const changeFilter = (event) => {\n        const filterValue = event.currentTarget.value;\n        dispatch(changesFilter({ filterValue }));\n    };\n\n\n  return (\n    <label className={css.FilterLabel}>\n      Find contacts by name\n      <input\n        className={css.FilterInput}\n        type=\"text\"\n        // value={value}\n        value={filter}\n        // onChange={onChange}\n        onChange={changeFilter}\n      />\n    </label>\n)};\n\n\n// Filter.propTypes = {\n//   value: PropTypes.string.isRequired,\n//   onChange: PropTypes.func.isRequired,\n// };\n\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TaskList } from 'components/TaskList/TaskList';\nimport { TaskEditor } from 'components/TaskEditor/TaskEditor';\nimport { fetchTasks } from 'redux/tasks/operations';\nimport { selectLoading } from 'redux/tasks/selectors';\n\nimport { getFilter } from 'redux/filter/filterSelectors';\n// import { changesFilter } from 'redux/filter/filterSlice';\n\nimport { selectAllTasks } from 'redux/tasks/selectors';\n\nimport { Container } from 'components/Container/Container';\nimport { Loader } from 'components/Loader/Loader';\nimport { Filter } from 'components/Filter/Filter';\n\n\n\nexport default function Tasks() {\n    const dispatch = useDispatch();\n\n    const isLoading = useSelector(selectLoading);\n    // console.log(\"Tasks==>isLoading:\", isLoading); //!\n\n    const filter = useSelector(getFilter);\n    // console.log(\"Tasks==>filter:\", filter); //!\n\n    const contacts = useSelector(selectAllTasks);\n    // console.log(\"Tasks==>contacts:\", contacts); //!\n\n\n    useEffect(() => {\n        dispatch(fetchTasks());\n    }, [dispatch]);\n\n\n\n    //! ++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n    //! запись значения из input-(Find contacts by name) в filter\n    // const changeFilter = (event) => {\n    //     const filterValue = event.currentTarget.value;\n    //     dispatch(changesFilter({ filterValue }));\n    // };\n\n    //! Создание нового массива объектов из contacts с учетом значения поиска из filter\n    const getVisibleContacts = () => {\n        const normalizedFilter = filter.toLowerCase();\n        return contacts.filter(contact =>\n            (contact.name.toLowerCase()).includes(normalizedFilter),\n        );\n    };\n\n    const visibleContacts = getVisibleContacts();\n    const totalContacts = contacts.length;\n\n\n\n\n    return (\n        <Container>\n            <TaskEditor />\n\n            <h2>Contacts</h2>\n            <p>Total: {totalContacts}</p>\n\n            {isLoading && <Loader />}\n\n            {/* {!isLoading && <TaskList />} */}\n\n            {contacts.length > 0 && !isLoading && (\n                <>\n                    <Filter\n                    // value={filter}\n                    // onChange={changeFilter}\n                    />\n                    <TaskList\n                        visibleContacts={visibleContacts}\n                    />\n                </>\n            )}\n        </Container>\n    );\n}\n"],"names":["selectLoading","state","tasks","isLoading","selectAllTasks","items","TaskEditor","dispatch","useDispatch","className","css","onSubmit","e","preventDefault","form","currentTarget","name","elements","value","number","addTask","reset","alert","id","type","pattern","title","required","spin","keyframes","Spinner","CgSpinner","defaultProps","size","modalRoot","document","querySelector","Modal","children","onClose","useEffect","handleKeyDown","event","code","window","addEventListener","removeEventListener","createPortal","onClick","target","Task","useState","showModal","setShowModal","useSelector","toggleModal","newName","newNumber","console","log","editContact","disabled","deleteTask","TaskList","visibleContacts","map","getFilter","filter","Container","Loader","style","margin","width","Filter","onChange","filterValue","changesFilter","Tasks","contacts","fetchTasks","normalizedFilter","toLowerCase","contact","includes","getVisibleContacts","totalContacts","length"],"sourceRoot":""}