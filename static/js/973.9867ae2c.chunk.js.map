{"version":3,"file":"static/js/973.9867ae2c.chunk.js","mappings":"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","sources":["redux/contacts/contactsSelectors.js","components/Spinner/Spinner.js","webpack://react-homework-template/./src/components/ContactEditor/ContactEditor.module.css?ead8","components/ContactEditor/ContactEditor.js","webpack://react-homework-template/./src/components/Modal/Modal.module.css?28d7","components/Modal/Modal.jsx","webpack://react-homework-template/./src/components/ContactListItem/ContactListItem.module.css?7127","components/ContactListItem/ContactListItem.js","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.js","redux/filter/filterSelectors.js","webpack://react-homework-template/./src/components/Container/Container.module.css?9f71","components/Container/Container.jsx","components/Loader/Loader.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["// export const selectLoading = state => state.contacts.loading; //! Ошибка Репеты\nexport const selectLoading = state => state.contacts.isLoading;\n\n// export const selectFilter = state => state.contacts.filter;\n\nexport const selectAllContacts = state => state.contacts.items;\n","import styled from '@emotion/styled/macro';\nimport { keyframes } from '@emotion/react';\nimport { CgSpinner } from 'react-icons/cg';\n\nconst spin = keyframes`\n0% {\n  transform: rotate(0deg);\n}\n\n100% {\n  transform: rotate(1turn);\n}\n`;\n\nexport const Spinner = styled(CgSpinner)`\n  animation: ${spin} 0.85s linear infinite;\n`;\n\nSpinner.defaultProps = {\n  size: 40,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"FormEdit\":\"ContactEditor_FormEdit__u3Qim\",\"FormLabelEdit\":\"ContactEditor_FormLabelEdit__ul2rA\",\"FormBtnEdit\":\"ContactEditor_FormBtnEdit__nK0vb\",\"FormInputEdit\":\"ContactEditor_FormInputEdit__EXW93\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { editContact } from 'redux/contacts/contactsOperations';\nimport PropTypes from 'prop-types';\n\n// import { ToastContainer, toast } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css';\n\nimport { selectAllContacts, selectLoading } from 'redux/contacts/contactsSelectors';\nimport { Spinner } from 'components/Spinner/Spinner';\n\nimport css from './ContactEditor.module.css';\n\n\nexport const ContactEditor = ({ id, name, number, toggleModal }) => {\n    const dispatch = useDispatch();\n\n    const contacts = useSelector(selectAllContacts);\n    // console.log(\"Contacts==>contacts:\", contacts); //!\n\n    const isLoading = useSelector(selectLoading);\n    // console.log(\"ContactListItem==>isLoading:\", isLoading); //!\n\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        const form = e.currentTarget;\n        const newName = form.elements.name.value;\n        const newNumber = form.elements.number.value;\n\n        if (\n            contacts.find(item => item.name.toLowerCase() === newName.toLowerCase())\n        ) {\n            alert(`${name} уже есть в контактах.`);\n            // toast.error(`${newName} уже есть в контактах.`); //! Повторяется два раза ???\n            form.reset();\n            return;\n        }\n\n        dispatch(editContact({ id, newName, newNumber }));\n        form.reset();\n        toggleModal()\n        return;\n\n    };\n\n\n\n    return (\n        <>\n            <form\n                className={css.FormEdit}\n                onSubmit={handleSubmit}\n            >\n\n                <label\n                    className={css.FormLabelEdit}\n                >\n                    {/* Name */}\n                    {isLoading ? \"Please wait...\" : \"Name\"}\n                    <br />\n                    <input\n                        className={css.FormInputEdit}\n                        id=\"inputName\"\n                        type=\"text\"\n                        name=\"name\"\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                        required\n                        defaultValue={name}\n                    // onChange={handleChange}\n                    />\n                </label>\n                <br />\n\n                <label className={css.FormLabelEdit}>\n                    {/* Number */}\n                    {isLoading ? \"...\" : \"Number\"}\n                    <br />\n                    <input\n                        className={css.FormInputEdit}\n                        type=\"tel\"\n                        name=\"number\"\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                        required\n                        defaultValue={number}\n                    // onChange={handleChange}\n                    />\n                </label>\n                <br />\n\n                <button\n                    className={css.FormBtnEdit}\n                    type=\"submit\"\n                    disabled={isLoading}\n                >\n                    {/* Edit contact */}\n                    {isLoading ? <Spinner size=\"32\">Add contact</Spinner> : \"Edit contact\"}\n\n                </button>\n            </form>\n            {/* <ToastContainer autoClose={1500} theme={\"colored\"} /> */}\n        </>\n    );\n}\n\nContactEditor.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    toggleModal: PropTypes.func.isRequired,\n};\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"Overlay\":\"Modal_Overlay__yoxbg\",\"Modal\":\"Modal_Modal__I1UYJ\"};","import { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\n\nimport css from 'components/Modal/Modal.module.css' \n\n\nconst modalRoot = document.querySelector('#modal-root');\n\n\n\n\nexport function Modal({ children, onClose }) {\n\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if (event.code === 'Escape') {\n        onClose();\n      }\n    };\n    \n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [onClose]); \n\n\n  const handleBackdropClick = event => {\n    if (event.currentTarget === event.target) {\n      onClose();\n    }\n  };\n\n\n\n    return createPortal(\n      <div\n        className={css.Overlay}\n        onClick={handleBackdropClick}\n      >\n          <div className={css.Modal}>\n          {children}\n          </div>\n      </div>,\n      modalRoot,\n    );\n  }\n\n\n\nModal.propTypes = {\n  children: PropTypes.node.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n\n","// extracted by mini-css-extract-plugin\nexport default {\"ContactListItem\":\"ContactListItem_ContactListItem__sSK4a\",\"ContactListText\":\"ContactListItem_ContactListText__A1dah\",\"ContactListNumber\":\"ContactListItem_ContactListNumber__2WeGK\",\"ContactListEditBtn\":\"ContactListItem_ContactListEditBtn__V1H9K\",\"ContactListDeleteBtn\":\"ContactListItem_ContactListDeleteBtn__TE5BB\"};","import { useState } from 'react'; //* +++\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\n\n// import { deleteContact, editContact } from 'redux/contacts/operations';\nimport { deleteContact } from 'redux/contacts/contactsOperations';\n\nimport { selectLoading } from 'redux/contacts/contactsSelectors';\nimport { ContactEditor } from 'components/ContactEditor/ContactEditor';\nimport { Spinner } from 'components/Spinner/Spinner';\nimport { Modal } from 'components/Modal/Modal';\n\nimport css from './ContactListItem.module.css';\n\n\n\nexport const ContactListItem = ({ id, name, number }) => {\n    const [showModal, setShowModal] = useState(false);\n\n    const dispatch = useDispatch();\n\n    const isLoading = useSelector(selectLoading);\n    // console.log(\"ContactListItem==>isLoading:\", isLoading); //!\n\n    const handleDelete = () => dispatch(deleteContact(id));\n\n    //! +++++++++++++++++++++++++++++++++++\n    const toggleModal = () => {\n        setShowModal(!showModal);\n    };\n\n    const handleEdit = () => {\n        toggleModal()\n        // const newName = \"RoseEDIT\"\n        // const newNumber = \"000-00-00\"\n        // console.log(\"id:\", id);\n        // console.log(\"newName:\", newName);\n        // console.log(\"newNumber:\", newNumber);\n\n        // ContactForm(newName, newNumber)\n\n        // dispatch(editContact({ id, newName, newNumber }))\n    };\n    //! +++++++++++++++++++++++++++++++++++\n\n\n\n    return (\n        <>\n            <li className={css.ContactListItem}>\n                <p className={css.ContactListText}>{name}:\n                    <span className={css.ContactListNumber}\n                    > {number}\n                    </span>\n                </p>\n                <button\n                    type=\"button\"\n                    className={css.ContactListEditBtn}\n                    onClick={handleEdit}\n                    // onClick={() => deleteContact(id)}\n                    disabled={isLoading}\n                >\n                    {/* Edit */}\n                    {isLoading ? [<Spinner size=\"18\" />, \" Editing...\"] : \"Edit\"}\n                </button>\n                <button\n                    type=\"button\"\n                    className={css.ContactListDeleteBtn}\n                    onClick={handleDelete}\n                    // onClick={() => deleteContact(id)}\n                    disabled={isLoading}\n                >\n                    {/* Delete */}\n                    {isLoading ? [<Spinner size=\"18\" />, \" Deleting...\"] : \"Delete\"}\n                </button>\n\n                {showModal && (\n                    <Modal onClose={toggleModal}>\n                        <ContactEditor\n                            id={id}\n                            name={name}\n                            number={number}\n                            toggleModal={toggleModal}\n\n                        />\n                    </Modal>\n                )}\n            </li>\n        </>\n    );\n};\n\nContactListItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"ContactList\":\"ContactList_ContactList__2mXfy\"};","// import { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { ContactListItem } from '../ContactListItem/ContactListItem';\n// import { selectAllTasks } from 'redux/tasks/selectors';\n\nimport css from './ContactList.module.css';\n\n\n\nexport const ContactList = ({ visibleContacts }) => {\n    // const contacts = useSelector(selectAllTasks);\n    // console.log(\"ContactList==>contacts:\", contacts); //!\n\n    return (\n        <ul className={css.ContactList}>\n            {visibleContacts.map(({ id, name, number }) => (\n                <ContactListItem\n                    key={id}\n                    // key={Number(id)}\n                    id={id}\n                    // id={Number(id)}\n                    name={name}\n                    number={number}\n                />\n            ))}\n        </ul>\n    );\n};\n\n\nContactList.propTypes = {\n    visibleContacts: PropTypes.array.isRequired,\n};","// extracted by mini-css-extract-plugin\nexport default {\"Form\":\"ContactForm_Form__IBmOq\",\"FormLabel\":\"ContactForm_FormLabel__SwfwS\",\"FormBtn\":\"ContactForm_FormBtn__qtcqm\",\"FormInput\":\"ContactForm_FormInput__s9Pni\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/contactsOperations';\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { selectAllContacts, selectLoading } from 'redux/contacts/contactsSelectors';\nimport { Spinner } from 'components/Spinner/Spinner';\n\nimport css from './ContactForm.module.css';\n\n\n\nexport const ContactForm = () => {\n    const dispatch = useDispatch();\n\n    const contacts = useSelector(selectAllContacts);\n    // console.log(\"Contacts==>contacts:\", contacts); //!\n\n    const isLoading = useSelector(selectLoading);\n    // console.log(\"ContactListItem==>isLoading:\", isLoading); //!\n\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        const form = e.currentTarget;\n        const name = form.elements.name.value;\n        const number = form.elements.number.value;\n\n        if (\n            contacts.find(item => item.name.toLowerCase() === name.toLowerCase())\n        ) {\n            // alert(`${name} уже есть в контактах.`);\n            toast.warning(`${name} уже есть в контактах.`);\n            form.reset();\n            return;\n        }\n\n        dispatch(addContact({ name, number }));\n        form.reset();\n        return;\n    };\n\n\n\n    return (\n        <>\n            <form\n                className={css.Form}\n                onSubmit={handleSubmit}\n            >\n\n                <label\n                    className={css.FormLabel}\n                >\n                    {/* Name */}\n                    {isLoading ? \"Please wait...\" : \"Name\"}\n                    <br />\n                    <input\n                        className={css.FormInput}\n                        id=\"inputName\"\n                        type=\"text\"\n                        name=\"name\"\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                        required\n                    // value={nameValue}\n                    // onChange={handleChange}\n                    />\n                </label>\n                <br />\n\n                <label className={css.FormLabel}>\n                    {/* Number */}\n                    {isLoading ? \"...\" : \"Number\"}\n                    <br />\n                    <input\n                        className={css.FormInput}\n                        type=\"tel\"\n                        name=\"number\"\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                        required\n                    // value={numberValue}\n                    // onChange={handleChange}\n                    />\n                </label>\n                <br />\n\n                <button\n                    className={css.FormBtn}\n                    type=\"submit\"\n                    disabled={isLoading}\n                >\n                    {/* Add contact */}\n                    {isLoading ? <Spinner size=\"32\">Add contact</Spinner> : \"Add contact\"}\n                </button>\n            </form>\n\n            <ToastContainer autoClose={1500} theme={\"colored\"} />\n        </>\n    );\n}\n\n\n\n\n\n","// export const getFilter = state => state.contacts.filter; //todo OLD\nexport const getFilter = state => state.filter; //! для 3-го варианта store with RTK Query","// extracted by mini-css-extract-plugin\nexport default {\"Container\":\"Container_Container__dPyVg\"};","import React from 'react';\nimport PropTypes from 'prop-types';\n// import './Container.css';\n// import 'components/Container/Container.css';\n\nimport css from 'components/Container/Container.module.css' //todo = старый вариант импорта стилей\n\n\nexport const Container = ({ children }) =>\n    <div className={css.Container}>\n        {children}\n    </div>;\n\n\nContainer.propTypes = {\n    children: PropTypes.node.isRequired,\n};\n\n\n","import React from 'react';\n// import PropTypes from 'prop-types';\n\nimport { Audio } from  'react-loader-spinner'\n\n\n\nexport const Loader = () => (\n  <h1 style={{ margin: '0 auto' }}>\n    Please wait...\n      <Audio width = \"100%\" />\n  </h1>\n);\n\n\n\n// export default Loader;\n","// extracted by mini-css-extract-plugin\nexport default {\"FilterLabel\":\"Filter_FilterLabel__OSs84\",\"FilterInput\":\"Filter_FilterInput__-+rOd\"};","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n// import PropTypes from 'prop-types';\n\nimport css from 'components/Filter/Filter.module.css' \n\nimport { getFilter } from 'redux/filter/filterSelectors';\nimport { changesFilter } from 'redux/filter/filterSlice';\n\n\n// export const Filter = ({ value, onChange }) => {\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n  console.log(\"Filter==>filter:\", filter); //!\n\n//! запись значения из input-(Find contacts by name) в filter\n    const changeFilter = (event) => {\n        const filterValue = event.currentTarget.value;\n        dispatch(changesFilter({ filterValue }));\n    };\n\n\n  return (\n    <label className={css.FilterLabel}>\n      Find contacts by name\n      <input\n        className={css.FilterInput}\n        type=\"text\"\n        // value={value}\n        value={filter}\n        // onChange={onChange}\n        onChange={changeFilter}\n      />\n    </label>\n)};\n\n\n// Filter.propTypes = {\n//   value: PropTypes.string.isRequired,\n//   onChange: PropTypes.func.isRequired,\n// };\n\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\nimport { selectLoading } from 'redux/contacts/contactsSelectors';\n\nimport { getFilter } from 'redux/filter/filterSelectors';\n// import { changesFilter } from 'redux/filter/filterSlice';\n\nimport { selectAllContacts } from 'redux/contacts/contactsSelectors';\n\nimport { Container } from 'components/Container/Container';\nimport { Loader } from 'components/Loader/Loader';\nimport { Filter } from 'components/Filter/Filter';\n\n\n\nexport default function Contacts() {\n    const dispatch = useDispatch();\n\n    const isLoading = useSelector(selectLoading);\n    // console.log(\"Contacts==>isLoading:\", isLoading); //!\n\n    const filter = useSelector(getFilter);\n    // console.log(\"Contacts==>filter:\", filter); //!\n\n    const contacts = useSelector(selectAllContacts);\n    // console.log(\"Contacts==>contacts:\", contacts); //!\n\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n\n\n    //! ++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n    //! запись значения из input-(Find contacts by name) в filter\n    // const changeFilter = (event) => {\n    //     const filterValue = event.currentTarget.value;\n    //     dispatch(changesFilter({ filterValue }));\n    // };\n\n    //! Создание нового массива объектов из contacts с учетом значения поиска из filter\n    const getVisibleContacts = () => {\n        const normalizedFilter = filter.toLowerCase();\n        return contacts.filter(contact =>\n            (contact.name.toLowerCase()).includes(normalizedFilter),\n        );\n    };\n\n    const visibleContacts = getVisibleContacts();\n    const totalContacts = contacts.length;\n\n\n\n\n    return (\n        <Container>\n            <ContactForm />\n\n            <h2>Contacts</h2>\n            <p>Total: {totalContacts}</p>\n\n            {isLoading && <Loader />}\n\n            {/* {!isLoading && <ContactList />} */}\n\n            {contacts.length > 0 && !isLoading && (\n                <>\n                    <Filter\n                    // value={filter}\n                    // onChange={changeFilter}\n                    />\n                    <ContactList\n                        visibleContacts={visibleContacts}\n                    />\n                </>\n            )}\n        </Container>\n    );\n}\n"],"names":["selectLoading","state","contacts","isLoading","selectAllContacts","items","spin","keyframes","Spinner","CgSpinner","defaultProps","size","ContactEditor","id","name","number","toggleModal","dispatch","useDispatch","useSelector","className","css","onSubmit","e","preventDefault","form","currentTarget","newName","elements","value","newNumber","find","item","toLowerCase","alert","reset","editContact","type","pattern","title","required","defaultValue","disabled","modalRoot","document","querySelector","Modal","children","onClose","useEffect","handleKeyDown","event","code","window","addEventListener","removeEventListener","createPortal","onClick","target","ContactListItem","useState","showModal","setShowModal","deleteContact","ContactList","visibleContacts","map","ContactForm","toast","addContact","autoClose","theme","getFilter","filter","Container","Loader","style","margin","width","Filter","console","log","onChange","filterValue","changesFilter","Contacts","fetchContacts","normalizedFilter","contact","includes","getVisibleContacts","totalContacts","length"],"sourceRoot":""}