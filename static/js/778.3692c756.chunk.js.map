{"version":3,"file":"static/js/778.3692c756.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Task/Task.module.css?22e8","components/Task/Task.js","webpack://react-homework-template/./src/components/TaskList/TaskList.module.css?079b","components/TaskList/TaskList.js","webpack://react-homework-template/./src/components/TaskEditor/TaskEditor.module.css?47aa","components/TaskEditor/TaskEditor.js","redux/tasks/selectors.js","redux/filter/filterSelectors.js","webpack://react-homework-template/./src/components/Container/Container.module.css?9f71","components/Container/Container.jsx","components/Loader/Loader.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/Tasks.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Task_wrapper__zvx3s\",\"text\":\"Task_text__IwwM2\",\"button\":\"Task_button__dYLbw\",\"ContactListItem\":\"Task_ContactListItem__WYtbi\",\"ContactListText\":\"Task_ContactListText__s+bVg\",\"ContactListNumber\":\"Task_ContactListNumber__lqI8z\",\"ContactListEditBtn\":\"Task_ContactListEditBtn__yxVxT\",\"ContactListDeleteBtn\":\"Task_ContactListDeleteBtn__Vmo4l\"};","import { useDispatch } from 'react-redux';\nimport { deleteTask, editContact } from 'redux/tasks/operations';\n\n// import { TaskEditor } from 'components/TaskEditor/TaskEditor';\n// import { Spinner } from 'components/Spinner/Spinner';\nimport css from './Task.module.css';\n\n\n\nexport const Task = ({ id, name, number }) => {\n    const dispatch = useDispatch();\n\n    const handleDelete = () => dispatch(deleteTask(id));\n\n    const handleEdit = () => {\n        const newName = \"RoseEDIT\"\n        const newNumber = \"000-00-00\"\n        console.log(\"id:\", id);\n        console.log(\"newName:\", newName);\n        console.log(\"newNumber:\", newNumber);\n\n        // TaskEditor(newName, newNumber)\n\n        dispatch(editContact({ id, newName, newNumber }))\n    };\n\n    return (\n        <li className={css.ContactListItem}>\n            <p className={css.ContactListText}>{name}:\n                <span className={css.ContactListNumber}\n                > {number}\n                </span>\n            </p>\n            <button\n                type=\"button\"\n                className={css.ContactListEditBtn}\n                onClick={handleEdit}\n            // onClick={() => deleteContact(id)}\n            // disabled={isDeleting}\n            >\n                Edit\n                {/* {isDeleting ? [<Spinner size=\"18\" />, \" Deleting...\"] : \"Delete\"} */}\n            </button>\n            <button\n                type=\"button\"\n                className={css.ContactListDeleteBtn}\n                onClick={handleDelete}\n            // onClick={() => deleteContact(id)}\n            // disabled={isDeleting}\n            >\n                Delete\n                {/* {isDeleting ? [<Spinner size=\"18\" />, \" Deleting...\"] : \"Delete\"} */}\n            </button>\n        </li>\n    );\n};\n\n\n\n// export const Task = ({ id, text }) => {\n//     const dispatch = useDispatch();\n//     const handleDelete = () => dispatch(deleteTask(id));\n\n//     return (\n//         <div className={css.wrapper}>\n//             <p className={css.text}>{text}</p>\n//             <button type=\"button\" className={css.button} onClick={handleDelete}>\n//                 Delete\n//             </button>\n//         </div>\n//     );\n// };\n\n\n// ContactListItem.propTypes = {\n//     id: PropTypes.string.isRequired,\n//     // id: PropTypes.number.isRequired,\n//     name: PropTypes.string.isRequired,\n//     number: PropTypes.string.isRequired,\n// };\n","// extracted by mini-css-extract-plugin\nexport default {\"ContactList\":\"TaskList_ContactList__ZVQgm\"};","// import { useSelector } from 'react-redux';\nimport { Task } from '../Task/Task';\n// import { selectAllTasks } from 'redux/tasks/selectors';\nimport css from './TaskList.module.css';\n\nexport const TaskList = ({ visibleContacts }) => {\n    // const tasks = useSelector(selectAllTasks);\n    // console.log(\"TaskList==>tasks:\", tasks); //!\n\n    return (\n        <ul className={css.ContactList}>\n            {visibleContacts.map(({ id, name, number }) => (\n                <Task\n                    key={id}\n                    // key={Number(id)}\n                    id={id}\n                    // id={Number(id)}\n                    name={name}\n                    number={number}\n                />\n            ))}\n        </ul>\n    );\n\n\n\n    // return (\n    //     <ul className={css.list}>\n    //         {tasks.map(({ id, text }) => (\n    //             <li key={id}>\n    //                 <Task id={id} text={text} />\n    //             </li>\n    //         ))}\n    //     </ul>\n    // );\n};\n\n\n// ContactList.propTypes = {\n//     visibleContacts: PropTypes.array.isRequired,\n// };","// extracted by mini-css-extract-plugin\nexport default {\"Form\":\"TaskEditor_Form__wa-SE\",\"FormLabel\":\"TaskEditor_FormLabel__4glZA\",\"FormBtn\":\"TaskEditor_FormBtn__tHm6t\",\"FormInput\":\"TaskEditor_FormInput__+5PdH\"};","import { useDispatch } from 'react-redux';\nimport { addTask } from 'redux/tasks/operations';\nimport css from './TaskEditor.module.css';\n\n\n// export const TaskEditor = (nameValue = \"rus\", numberValue = \"\") => {\nexport const TaskEditor = () => {\n    const dispatch = useDispatch();\n\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        // e.currentTarget.elements.name.value = \"Ruslan\";\n        // e.currentTarget.elements.number.value = numberValue;\n\n        // document.querySelector('#inputName').value = \"nameValue\";\n\n\n        const form = e.currentTarget;\n        const name = form.elements.name.value;\n        const number = form.elements.number.value;\n        if (name !== \"\" && number !== \"\") {\n            dispatch(addTask({ name, number }));\n            form.reset();\n            return;\n        }\n        alert('Заполни текст заметки.');\n    };\n\n    return (\n        <form\n            className={css.Form}\n            onSubmit={handleSubmit}\n        >\n\n            <label\n                className={css.FormLabel}\n            >\n                Name\n                {/* {addition ? \"Wait for add...\" : \"Name\"} */}\n                <br />\n                <input\n                    className={css.FormInput}\n                    id=\"inputName\"\n                    type=\"text\"\n                    name=\"name\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                // value={nameValue}\n                // onChange={handleChange}\n                />\n            </label>\n            <br />\n\n            <label className={css.FormLabel}>\n                Number\n                {/* {addition ? \"...\" : \"Number\"} */}\n                <br />\n                <input\n                    className={css.FormInput}\n                    type=\"tel\"\n                    name=\"number\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                // value={numberValue}\n                // onChange={handleChange}\n                />\n            </label>\n            <br />\n\n            <button\n                className={css.FormBtn}\n                type=\"submit\"\n            // disabled={addition}\n            >\n                Add contact\n                {/* {addition ? <Spinner size= \"32\">Add contact</Spinner>  : \"Add contact\"} */}\n            </button>\n        </form>\n    );\n}\n\n// ContactForm.propTypes = {\n//     onSubmit: PropTypes.func.isRequired,\n// };\n\n\n\n\n\n\n\n    // const dispatch = useDispatch();\n\n    // const handleSubmit = e => {\n    //     e.preventDefault();\n    //     const form = e.currentTarget;\n    //     const text = form.elements.text.value;\n    //     if (text !== '') {\n    //         dispatch(addTask(text));\n    //         form.reset();\n    //         return;\n    //     }\n    //     alert('Заполни текст заметки.');\n    // };\n\n    // return (\n    //     <form className={css.form} onSubmit={handleSubmit}>\n    //         <input name=\"text\" className={css.input} />\n    //         <button type=\"submit\" className={css.button}>\n    //             Add todo\n    //         </button>\n    //     </form>\n    // );\n\n","// export const selectLoading = state => state.tasks.loading; //! Ошибка Репеты\nexport const selectLoading = state => state.tasks.isLoading;\n\n// export const selectFilter = state => state.tasks.filter;\n\nexport const selectAllTasks = state => state.tasks.items;\n","// export const getFilter = state => state.contacts.filter; //todo OLD\nexport const getFilter = state => state.filter; //! для 3-го варианта store with RTK Query","// extracted by mini-css-extract-plugin\nexport default {\"Container\":\"Container_Container__dPyVg\"};","import React from 'react';\nimport PropTypes from 'prop-types';\n// import './Container.css';\n// import 'components/Container/Container.css';\n\nimport css from 'components/Container/Container.module.css' //todo = старый вариант импорта стилей\n\n\nexport const Container = ({ children }) =>\n    <div className={css.Container}>\n        {children}\n    </div>;\n\n\nContainer.propTypes = {\n    children: PropTypes.node.isRequired,\n};\n\n\n","import React from 'react';\n// import PropTypes from 'prop-types';\n\nimport { Audio } from  'react-loader-spinner'\n\n\n\nexport const Loader = () => (\n  <h1 style={{ margin: '0 auto' }}>\n    Please wait...\n      <Audio width = \"100%\" />\n  </h1>\n);\n\n\n\n// export default Loader;\n","// extracted by mini-css-extract-plugin\nexport default {\"FilterLabel\":\"Filter_FilterLabel__OSs84\",\"FilterInput\":\"Filter_FilterInput__-+rOd\"};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport css from 'components/Filter/Filter.module.css' \n\n\n\n\nexport const Filter = ({ value, onChange }) => (\n  <label className={css.FilterLabel}>\n    Find contacts by name\n    <input\n      className={css.FilterInput}\n      type=\"text\"\n      value={value}\n      onChange={onChange}\n    />\n  </label>\n);\n\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TaskList } from 'components/TaskList/TaskList';\nimport { TaskEditor } from 'components/TaskEditor/TaskEditor';\nimport { fetchTasks } from 'redux/tasks/operations';\nimport { selectLoading } from 'redux/tasks/selectors';\n\nimport { getFilter } from 'redux/filter/filterSelectors';\nimport { changesFilter } from 'redux/filter/filterSlice';\n\nimport { selectAllTasks } from 'redux/tasks/selectors';\n\nimport { Container } from 'components/Container/Container';\nimport { Loader } from 'components/Loader/Loader';\nimport { Filter } from 'components/Filter/Filter';\n\n\n\nexport default function Tasks() {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(selectLoading);\n    console.log(\"Tasks==>isLoading:\", isLoading); //!\n    //! ++++++++++++++++++ Хук useSelector  ++++++++++++++++++\n    //! читает данные из state Redux-хранилища и подписывается на их обновление\n    const filter = useSelector(getFilter);\n    console.log(\"Tasks==>filter:\", filter); //!\n\n    const contacts = useSelector(selectAllTasks);\n    console.log(\"Tasks==>contacts:\", contacts); //!\n\n    useEffect(() => {\n        dispatch(fetchTasks());\n    }, [dispatch]);\n\n\n\n    //! ++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n    //! запись значения из input-(Find contacts by name) в filter\n    const changeFilter = (event) => {\n        const filterValue = event.currentTarget.value;\n        dispatch(changesFilter({ filterValue }));\n    };\n\n    //! Создание нового массива объектов из contacts с учетом значения поиска из filter\n    const getVisibleContacts = () => {\n        const normalizedFilter = filter.toLowerCase();\n        return contacts.filter(contact =>\n            (contact.name.toLowerCase()).includes(normalizedFilter),\n        );\n    };\n\n    const visibleContacts = getVisibleContacts();\n    const totalContacts = contacts.length;\n\n\n\n\n    return (\n        <Container>\n            <TaskEditor />\n\n            <h2>Contacts</h2>\n            <p>Total: {totalContacts}</p>\n\n            {/* <div>{isLoading && 'Request in progress...'}</div> */}\n\n            {isLoading && <Loader />}\n\n            {/* {!isLoading && <TaskList />} */}\n\n            {contacts.length > 0 && !isLoading && (\n                <>\n                    <Filter\n                        value={filter}\n                        onChange={changeFilter}\n                    />\n                    <TaskList\n                        visibleContacts={visibleContacts}\n                    />\n                </>\n            )}\n        </Container>\n    );\n}\n"],"names":["Task","id","name","number","dispatch","useDispatch","className","css","type","onClick","newName","newNumber","console","log","editContact","deleteTask","TaskList","visibleContacts","map","TaskEditor","onSubmit","e","preventDefault","form","currentTarget","elements","value","addTask","reset","alert","pattern","title","required","selectLoading","state","tasks","isLoading","selectAllTasks","items","getFilter","filter","Container","children","Loader","style","margin","width","Filter","onChange","Tasks","useSelector","contacts","useEffect","fetchTasks","normalizedFilter","toLowerCase","contact","includes","getVisibleContacts","totalContacts","length","event","filterValue","changesFilter"],"sourceRoot":""}